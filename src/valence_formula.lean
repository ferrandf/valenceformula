import number_theory.modular
import algebra.big_operators.basic
import analysis.complex.unit_disc.basic
--import .q_expansion
import .mod_f

/-
# Valence formula statement:

- We add a the bounded at im_infty property to our previously defined 
  is_holomorphic_on functions using results in 
  analysis.complex.upper_half_plane.functions_bounded_at_infty.

## Main definitions:

* class is_holomoprhic_bdd: sets the conditions any f : ‚Ñç' ‚Üí ‚ÑÇ has to satisfy; 

* pseries_of_holomorphic: is the power series of a given is_holomorphic_bdd function;

* We define the order of a is_holomoprhic_bdd function at a given point.

## Main results:

* Any function thas satisfies is_holomorphic_bdd is also analytic using 
  its extension by zero (from file: holomorphic_functions.lean).

* The pseries_of_holomorphic is the formal_multilinear_series of the function.

* The order is well defined.

-/

open complex
open_locale big_operators classical
noncomputable theory

open modular_form modular_group complex filter asymptotics

open_locale upper_half_plane real topological_space manifold filter

local notation `‚Ñç'`:=(‚ü®upper_half_space , upper_half_plane_is_open‚ü©: open_subs)

local notation `‚Ñç`:=upper_half_plane

instance : charted_space ‚ÑÇ ‚Ñç' := infer_instance

local prefix `‚Üë‚Çò`:1024 := @coe _ (matrix (fin 2) (fin 2) _) _
local notation `GL(` n `, ` R `)`‚Å∫:= matrix.GL_pos (fin n) R
local notation `SL(` n `, ` R `)`:= matrix.special_linear_group (fin n) R

localized "notation (name := modular_group.fd) `ùíü` := modular_group.fd" in modular

localized "notation (name := modular_group.fdo) `ùíü·µí` := modular_group.fdo" in modular

--Definitions of orders/valuations

def val_i (F : Mer‚Ñç) := F.order (‚ü®(‚ü®0, 1‚ü© : ‚ÑÇ), by {simp only [zero_lt_one],} ‚ü© : ‚Ñç)

def val_rho (F : Mer‚Ñç) := F.order (‚ü®(‚ü®-0.5, (real.sqrt (3 : ‚Ñù))*0.5‚ü© : ‚ÑÇ), by {simp,} ‚ü© : ‚Ñç)

def S‚ÇÄ' (F : Mer‚Ñç) : set ùíü·µí := {z | F.order z ‚â† 0}
lemma S‚ÇÄ'_finite (F : Mer‚Ñç) : (S‚ÇÄ' F).finite := by sorry
def S‚ÇÄ (F : Mer‚Ñç) := set.finite.to_finset (S‚ÇÄ'_finite F)


def S‚ÇÅ' (F: Mer‚Ñç) : set (frontier ùíü) := {z | F.order ‚â† 0} 
lemma S‚ÇÅ'_finite (F : Mer‚Ñç) : (S‚ÇÅ' F).finite := by sorry
def S‚ÇÅ (F : Mer‚Ñç) := set.finite.to_finset (S‚ÇÅ'_finite F)


localized "notation `ùîª` := complex.unit_disc" in unit_disc

local notation `ùîª'` := ( ‚ü®unit_disc_sset, unit_disc_is_open‚ü© : topological_space.opens ‚ÑÇ)
instance : has_zero ùîª' := 
begin
  simp only [coe_sort_coe_base, subtype.coe_mk],
  have : (0 : ‚ÑÇ).abs < 1,
  {
    simp only [absolute_value.map_zero, zero_lt_one],
  },
  rw unit_disc_sset,
  use 0,
  exact this,
end

def map_to_upper (x : ‚Ñù) (y : ‚Ñù) (hy : y>0) : ‚Ñç := ‚ü®(x + y*I),
  by {
    simp only [complex.add_im, complex.of_real_im, zero_add, complex.of_real_mul_im,complex.I_im, mul_one],
    exact hy,
    } ‚ü©

def q_expansion_an (n : ‚Ñ§) (y : ‚Ñù) (hy : y>0) (f : Mer‚Ñç) (hf : one_periodicity f.map)
: ‚ÑÇ := exp(2 * œÄ * n * y) * ‚à´ (x : ‚Ñù) in 0..1, ( exp (-2 * œÄ * I * n *(map_to_upper x y hy))) * f.map (map_to_upper x y hy)

variables {s : set ‚Ñï}
def vtst (hs : s.nonempty) : ‚Ñï := Inf s
example (hs : s.nonempty) : vtst hs ‚àà s:=
begin
exact Inf_mem hs,
end


def val_infty_Mer‚Ñç (f : Mer‚Ñç) (hf : one_periodicity f.map) (y0 : ‚Ñù) (hy0 : y0 > 0) : ‚Ñ§ := sorry
--Inf {n : ‚Ñ§ | (q_expansion_an n y0 hy0 f hf) ‚â† 0}

lemma Mer‚Ñç.is_oneperiodic (k : ‚Ñ§) (F : Mer‚Ñçwm k) : one_periodicity F.val.map :=
begin
sorry,
end

theorem valence_formula (k : ‚Ñ§) (F : Mer‚Ñçwm k) :
  6 * (val_infty_Mer‚Ñç F.val (Mer‚Ñç.is_oneperiodic k F) 1 one_pos) + 3 * (val_i F.val) + 2 * (val_rho F.val)
  + 6 * ‚àë œÑ in (S‚ÇÄ F.val), (F.val.order œÑ) + 12 * ‚àë œÑ in (S‚ÇÅ F.val), (F.val.order œÑ) = k/2 := by sorry
