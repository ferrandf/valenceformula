/-Included in the project Formalizing Modular Forms (Ferran Delg√† Fern√°ndez)
under the supervision of Marc Masdeu.-/

import hol_bdd

/-
# Holomorphic and bounded at im_infty functions subring definition (Hol‚Ñç):

- We need our previous functions (is_holomorphic_bdd) to form a subring in order to
  complete our definition of the meromorphic functions.

## Main definitions:

* Hol‚Ñç is the subring of ‚Ñç' ‚Üí ‚ÑÇ functions such that satisfy is_holomoprhic_bdd; 

* We define the order of a given Hol‚Ñç function;

## Main results:

* Hol‚Ñç is an integral domain (is_domain Hol‚Ñç).

* Hol‚Ñç is an algebra (algebra ‚ÑÇ Hol‚Ñç). 

-/

open_locale classical
noncomputable theory

open_locale topological_space upper_half_plane
open complex set upper_half_plane

local notation `‚Ñç'`:=(‚ü®upper_half_space , upper_half_plane_is_open‚ü©: open_subs)

local notation `‚Ñç`:=upper_half_plane

variables (f : ‚Ñç' ‚Üí ‚ÑÇ) [is_holomorphic_bdd f] (z : ‚Ñç')

lemma const_is_bounded (c : ‚ÑÇ) : is_bounded_at_im_infty (Œª z : ‚Ñç', c) :=
begin
simp only [bounded_mem],
use c.abs, use 0,
intros z hz,
linarith,
end

lemma smul_bounded {f : ‚Ñç' ‚Üí ‚ÑÇ} (c : ‚ÑÇ) (hf : is_bounded_at_im_infty f) : is_bounded_at_im_infty (c ‚Ä¢ f) :=
begin
apply is_bounded_at_im_infty.mul (const_is_bounded c) hf,
end

noncomputable def Hol‚Ñç : subring (‚Ñç' ‚Üí ‚ÑÇ) := {
  carrier := is_holomorphic_bdd,
  mul_mem' := Œª f g hf hg, ‚ü®mul_hol f g hf.diff hg.diff, 
  is_bounded_at_im_infty.mul hf.bdd_at_infty hg.bdd_at_infty‚ü©,
  one_mem' := ‚ü®one_hol ‚Ñç', const_is_bounded 1‚ü©,
  add_mem' := Œª f g hf hg, ‚ü®add_hol f g hf.diff hg.diff,
  hf.bdd_at_infty.add hg.bdd_at_infty‚ü©,
  zero_mem' := ‚ü®zero_hol ‚Ñç', zero_form_is_bounded_at_im_infty‚ü©,
  neg_mem' := Œª f hf, ‚ü®neg_hol f hf.diff,hf.bdd_at_infty.neg_left‚ü©
}

instance is_holomorphic_on' (f : Hol‚Ñç) : is_holomorphic_bdd f := 
subring.mem_carrier.mpr f.property

def Hol‚Ñç.order (f : Hol‚Ñç) (z : ‚Ñç) : ‚Ñ§ := @hol_order f.val f.property z

lemma pseries_neq_zero_function_neq_zero (z : ‚Ñç') (f : Hol‚Ñç)  
(hp : (pseries_of_holomorphic f z) ‚â† 0): 
f.val ‚â† (0 : ‚Ñç' ‚Üí ‚ÑÇ) :=
begin
  intro h,
  have hc : (pseries_of_holomorphic f z) = 0,
  {
    have j : extend_by_zero f.val = 0,
    {
      rw h,
      exact extend_by_zero_zero',
    },
    have p : has_fpower_series_at (extend_by_zero f.val) (pseries_of_holomorphic f z) z,
    {
      apply pseries_of_holomorphic_def,
    },
    rw j at p,
    rw has_fpower_series_at.eq_zero p,
  },
  exact hp hc,
end

lemma hol_bdd.eventually_eq_zero_everywhere (f : Hol‚Ñç) 
  (x : ‚Ñç') (hF : ‚àÄ·∂† z in ùìù x, (extend_by_zero f.val) z = 0):
  (extend_by_zero f.val) = (0 : ‚ÑÇ ‚Üí ‚ÑÇ) :=
begin
have hf := analytic_on_of_holomorphic f,
have tf := analytic_on.eq_on_zero_of_preconnected_of_eventually_eq_zero hf preconn_‚Ñç' x.prop hF,
simp at tf ‚ä¢,
rw extend_by_zero,
apply funext, intros y,
by_cases hy : y ‚àà upper_half_space,
{
  simp [hy],
  intro h,
  specialize tf hy,
  rw extend_by_zero_eq_of_mem _ _ h at tf,
  exact tf,
},
{
  simp [hy],
  intro h,
  contradiction,
}
end


lemma function_neq_zero_forall_z_pseries_neq_zero (f : Hol‚Ñç)
(hf : f ‚â† 0) : ‚àÄ z : ‚Ñç', (pseries_of_holomorphic f z) ‚â† 0 :=
begin
intro z,
have it : f.val ‚â† (0 : ‚Ñç' ‚Üí ‚ÑÇ),
{
  simp only [subtype.val_eq_coe, ne.def, subring.coe_eq_zero_iff],
  exact hf,
},
intro h,
apply it,
apply extend_by_zero_f_eq_zero,
set F := pseries_of_holomorphic f z with hF,
have G : has_fpower_series_at (extend_by_zero f.val) F z := by {apply pseries_of_holomorphic_def},
rw h at G,
have l := has_fpower_series_at.eventually_eq_zero G,
exact hol_bdd.eventually_eq_zero_everywhere f z l,
end

example (z : ‚ÑÇ) (U : set ‚ÑÇ) (hU : is_open U) (hz : z ‚àà U): (U ‚à© {z}·∂ú).nonempty :=
begin
rw metric.is_open_iff at hU,
specialize hU z hz,
rcases hU with ‚ü®Œµ, ‚ü®hŒµ1, hŒµ2‚ü©‚ü©,
use z + Œµ/2,
apply mem_inter,
{
  apply hŒµ2,
  simp,
  rw abs_of_pos hŒµ1,
  linarith,
},
{
  simp,
  exact ne_of_gt hŒµ1,
}
end


lemma hkey (z : ‚ÑÇ) (U V V': set ‚ÑÇ) (hU : U ‚àà ùìù z) 
(hV : {z}·∂ú ‚äÜ V) (hV' : {z}·∂ú ‚äÜ V') : 
‚àÉ (w : ‚ÑÇ), w ‚àà U ‚à© (V ‚à© V') ‚àß w ‚â† z :=
begin
rw mem_nhds_iff at hU,
rcases hU with ‚ü®U',‚ü®hU'U,is_open_U', hzU'‚ü©‚ü©,
rw metric.is_open_iff at is_open_U',
specialize is_open_U' z hzU',
rcases is_open_U' with ‚ü®Œµ, ‚ü®hŒµ1, hŒµ2‚ü©‚ü©,
use z + Œµ/2,
split,
{
  apply mem_inter,
  {
    apply hU'U,
    apply hŒµ2,
    simp only [metric.mem_ball, dist_self_add_left, norm_eq_abs, map_div‚ÇÄ, abs_of_real, complex.abs_two],
    rw abs_of_pos hŒµ1,
    linarith,
  },
  {
    apply (subset_inter hV hV'),
    simp only [mem_compl_iff, mem_singleton_iff, add_right_eq_self, div_eq_zero_iff, of_real_eq_zero, bit0_eq_zero, one_ne_zero,
    or_false],
    exact ne_of_gt hŒµ1,
  }
},
{
  simp only [ne.def, add_right_eq_self, div_eq_zero_iff, of_real_eq_zero, bit0_eq_zero, one_ne_zero, or_false],
  exact ne_of_gt hŒµ1,
}
end

lemma Hol‚Ñç_eq_zero_or_eq_zero_of_mul_eq_zero (f g : Hol‚Ñç) : f * g = 0 ‚Üí  f = 0 ‚à® g = 0 :=
begin
  contrapose,
  intro h,
  push_neg at h,
  cases h with hf_ne_zero hg_ne_zero,
    let i := (‚ü®0, 1‚ü© : ‚ÑÇ),--(‚ü®(‚ü®0, 1‚ü© : ‚ÑÇ), by {simp,} ‚ü© : ‚Ñç),
  set F := pseries_of_holomorphic f (‚ü®i, by {simp only [zero_lt_one],} ‚ü© : ‚Ñç) with hF,
  have Fp : has_fpower_series_at (extend_by_zero f.val) F i := by {apply pseries_of_holomorphic_def},
  have rf := function_neq_zero_forall_z_pseries_neq_zero f hf_ne_zero,
  have tf : F ‚â† 0 := rf (‚ü®i, by {simp only [zero_lt_one],} ‚ü© : ‚Ñç),
  set G := pseries_of_holomorphic g (‚ü®i, by {simp only [zero_lt_one],} ‚ü© : ‚Ñç) with hG,
  have Gp : has_fpower_series_at (extend_by_zero g.val) G i := by {apply pseries_of_holomorphic_def},
  have rg := function_neq_zero_forall_z_pseries_neq_zero g hg_ne_zero,
  have tg : G ‚â† 0 := rg (‚ü®i, by {simp only [zero_lt_one],} ‚ü© : ‚Ñç),
  have ef := has_fpower_series_at.locally_ne_zero Fp tf,
  have eg := has_fpower_series_at.locally_ne_zero Gp tg,

  suffices : f.val * g.val ‚â† 0,
  {
    simp only [subtype.val_eq_coe] at this,
    norm_cast at this,
  },
  suffices : extend_by_zero (f.val * g.val) ‚â† 0,
    by exact extend_by_zero_f_neq_zero (f.val * g.val) this,

  rw extend_by_zero_mul,
  rcases ef with ‚ü®U, ‚ü®hU, ‚ü®V, ‚ü®hV,hfUV‚ü©‚ü©‚ü©‚ü©,
  rcases eg with ‚ü®U', ‚ü®hU', ‚ü®V', ‚ü®hV',hgUV'‚ü©‚ü©‚ü©‚ü©,
  simp only [filter.mem_principal, subtype.val_eq_coe, ne.def] at hfUV hgUV' hV hV',
  let W := V ‚à© V',
  have hk : ‚àÉ w, w ‚àà (U ‚à© U') ‚à© W ‚àß w ‚â† i,
  {
    refine hkey i (U ‚à© U') V V' _ hV hV',
    simp only [filter.inter_mem_iff],
    exact ‚ü®hU, hU'‚ü©,
  },
  simp only [subtype.val_eq_coe, ne.def],
  rcases hk with ‚ü®w, hwUW, hwi‚ü©,
  have hfw : extend_by_zero f.val w ‚â† 0,
  {
    have : w ‚àà U ‚à© V  := ‚ü®hwUW.1.1, hwUW.2.1‚ü©,
    rw ‚Üê hfUV at this,
    simpa using this,
  },
  have hgw : extend_by_zero g.val w ‚â† 0,
  {
    have : w ‚àà U' ‚à© V' := ‚ü®hwUW.1.2, hwUW.2.2‚ü©, 
    rw ‚Üê hgUV' at this,
    simpa using this,
  },
  have hfgw : (extend_by_zero f.val * extend_by_zero g.val) w ‚â† 0,
  {
    change extend_by_zero f.val w * extend_by_zero g.val w ‚â† 0,
    exact mul_ne_zero hfw hgw,
  },
  intro hc,
  apply hfgw,
  have hc' : (extend_by_zero ‚Üëf * extend_by_zero ‚Üëg) w = (0 : ‚ÑÇ ‚Üí ‚ÑÇ) w,
  {
    rw hc,
  },
  simpa using hc,
end

-- Hol‚Ñç is an integral domain

instance : is_domain Hol‚Ñç := {
  mul_left_cancel_of_ne_zero := 
  begin
    intros f g h hyp1 hyp2,
    have : f*g - f*h = 0 := sub_eq_zero_of_eq hyp2,
    have : f * (g-h) = 0,
    {
      rw [mul_sub, this],
    },
    have : g - h = 0, from (Hol‚Ñç_eq_zero_or_eq_zero_of_mul_eq_zero f (g-h) this).resolve_left hyp1,
    exact eq_of_sub_eq_zero this,
  end,
  mul_right_cancel_of_ne_zero := 
  begin
    intros f g h hyp1 hyp2,
      have : f * g - h * g = 0 := sub_eq_zero_of_eq hyp2,
      have : (f - h) * g = 0,
      {
        rw [sub_mul, this],
      },
      have : f - h = 0, from (Hol‚Ñç_eq_zero_or_eq_zero_of_mul_eq_zero (f-h) g this).resolve_right hyp1,
      exact eq_of_sub_eq_zero this,
  end,
  exists_pair_ne :=
  begin
    use (Œª z : ‚Ñç', 0),
    split,
    exact zero_hol ‚Ñç',
    exact const_is_bounded 0,
    use (Œª z : ‚Ñç', 1),
    split,
    exact one_hol ‚Ñç',
    exact const_is_bounded 1,
    simp only [ne.def, subtype.mk_eq_mk, function.const_inj, zero_ne_one, not_false_iff],
  end }

lemma bounded_at_im_infty.smul {f : ‚Ñç' ‚Üí ‚ÑÇ} (c : ‚ÑÇ) (hf : is_bounded_at_im_infty f) : 
is_bounded_at_im_infty (Œª z : ‚Ñç, c * f z) :=
begin
let h : ‚Ñç' ‚Üí ‚ÑÇ := Œª z, c,
let j := const_is_bounded c,
exact is_bounded_at_im_infty.mul j hf,
end

instance : has_smul ‚ÑÇ Hol‚Ñç := 
‚ü®Œª r f, ‚ü®Œª z, r * f.val z, ‚ü®smul_hol r f.val f.prop.diff,
bounded_at_im_infty.smul r f.prop.bdd_at_infty‚ü©‚ü©‚ü©

@[simp] lemma smul_def {f : ‚Ñç' ‚Üí ‚ÑÇ} (hf : f ‚àà Hol‚Ñç) {c : ‚ÑÇ} : (c ‚Ä¢ f) = Œª z, (c * (f z)) := rfl
@[simp] lemma smul_def' {f : Hol‚Ñç} {c : ‚ÑÇ} : (c ‚Ä¢ f).val = Œª z, (c * (f.val z)) := rfl

lemma comm_Hol‚Ñç (f g : Hol‚Ñç) : f*g = g*f :=
begin
apply subtype.eq,
simp [mul_comm],
end


instance : algebra ‚ÑÇ Hol‚Ñç := 
{ smul := has_smul.smul,
  to_fun := Œª r, ‚ü®(Œª z, r), by {
    split,
    exact const_hol r,
    exact const_is_bounded r,
  }‚ü©,
  map_one':= rfl,
  map_mul':= Œª _ _, rfl,
  map_zero' := rfl,
  map_add' := Œª _ _, rfl,
  commutes' := Œª _ _, by {rw comm_Hol‚Ñç},
  smul_def' := by {
    intros r f,
    simp,
    apply subtype.eq,
    simp,
    change _  = Œª (z : ‚Ñç'), r * f.val z,
    simp,
  }
}
