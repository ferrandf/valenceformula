import analysis.complex.upper_half_plane.topology
import analysis.complex.cauchy_integral
import analysis.complex.upper_half_plane.functions_bounded_at_infty
import analysis.calculus.fderiv
import algebra.algebra.basic
import ring_theory.subring.basic
import ring_theory.localization.fraction_ring
import .upper_half_plane_manifold
import .holomorphic_functions
import analysis.complex.basic
import analysis.analytic.isolated_zeros
import analysis.analytic.uniqueness



open_locale classical
noncomputable theory

open_locale topological_space upper_half_plane
open complex set upper_half_plane

local notation `‚Ñç'`:=(‚ü®upper_half_space , upper_half_plane_is_open‚ü©: open_subs)

local notation `‚Ñç`:=upper_half_plane

--instance : has_coe (set ‚Ñç) (set ‚ÑÇ) := ‚ü®Œª U, has_coe.coe '' U‚ü©

instance : has_coe (set ‚Ñç') (set ‚ÑÇ) := ‚ü®Œª U, subtype.val '' U‚ü©

instance : has_coe (‚ÑÇ ‚Üí ‚ÑÇ) (‚Ñç ‚Üí ‚ÑÇ) := ‚ü®Œª f, (Œª z, f z)‚ü©

class is_holomorphic_bdd (f : ‚Ñç' ‚Üí ‚ÑÇ) : Prop :=
  (diff : is_holomorphic_on f)
  (bdd_at_infty : is_bounded_at_im_infty f)

lemma open_univ : is_open ((univ : set ‚Ñç') : set ‚ÑÇ) :=
  open_embedding.is_open_map open_embedding_coe _ is_open_univ

lemma mykey' : (has_coe.coe : ‚Ñç' ‚Üí ‚ÑÇ) = (Œª z, z.val) :=
begin
  finish,
end

lemma mykey : upper_half_space = has_coe.coe '' (univ : set ‚Ñç') :=
begin
  rw mykey',
  finish,
end

lemma analytic_of_holomorphic (f : ‚Ñç' ‚Üí ‚ÑÇ) [h : is_holomorphic_bdd f] (z : ‚Ñç') :
analytic_at ‚ÑÇ (extend_by_zero f) z :=
begin
  have hf : differentiable_on ‚ÑÇ (extend_by_zero f) (has_coe.coe '' (univ : set ‚Ñç')),
  { 
    have j := (is_holomorphic_on_iff_differentiable_on ‚Ñç' f),
    dsimp at j,
    rw ‚Üê mykey,
    exact iff.elim_right j h.diff,
  },
  apply differentiable_on.analytic_at hf,
  refine mem_nhds_iff.mpr _,
  use (univ : set ‚Ñç'),
  exact ‚ü®rfl.subset, open_univ, sorry‚ü©,--‚ü®z, by finish‚ü©‚ü©,
end

lemma analytic_on_of_holomorphic (f : ‚Ñç' ‚Üí ‚ÑÇ) [h : is_holomorphic_bdd f] : 
analytic_on ‚ÑÇ (extend_by_zero f) ‚Ñç' :=
begin
  have hf : differentiable_on ‚ÑÇ (extend_by_zero f) (upper_half_space),
  { 
    have j := (is_holomorphic_on_iff_differentiable_on ‚Ñç' f),
    dsimp at j,
    exact iff.elim_right j h.diff,
  },
  apply differentiable_on.analytic_on hf,
  exact upper_half_plane_is_open,
end

variables (f : ‚Ñç' ‚Üí ‚ÑÇ) [is_holomorphic_bdd f] (z : ‚Ñç')

noncomputable def pseries_of_holomorphic := classical.some (analytic_of_holomorphic f z)

lemma pseries_of_holomorphic_def : has_fpower_series_at (extend_by_zero f) (pseries_of_holomorphic f z) z :=
  (classical.some_spec (analytic_of_holomorphic f z))

lemma pseries_unique {z : ‚Ñç} {p : formal_multilinear_series ‚ÑÇ ‚ÑÇ ‚ÑÇ}
(hfp : has_fpower_series_at (extend_by_zero f) p z) : p = pseries_of_holomorphic f z :=
begin
  apply has_fpower_series_at.eq_formal_multilinear_series hfp,
  apply pseries_of_holomorphic_def,
end

@[simp] def hol_order : ‚Ñ§ := (pseries_of_holomorphic f z).order

lemma hol_order_well_defined {p : formal_multilinear_series ‚ÑÇ ‚ÑÇ ‚ÑÇ}
(hfp : has_fpower_series_at (extend_by_zero f) p z) :  (p.order : ‚Ñ§) = hol_order f z :=
  by simp [pseries_unique f hfp]

lemma const_is_bounded (c : ‚ÑÇ) : is_bounded_at_im_infty (Œª z : ‚Ñç', c) :=
  begin
  simp only [bounded_mem],
  use c.abs, use 0,
  intros z hz,
  linarith,
  end


noncomputable def Hol‚Ñç : subring (‚Ñç' ‚Üí ‚ÑÇ) := {
  carrier := is_holomorphic_bdd,
  mul_mem' := Œª f g hf hg, ‚ü®mul_hol f g hf.diff hg.diff, 
  is_bounded_at_im_infty.mul hf.bdd_at_infty hg.bdd_at_infty‚ü©,
  one_mem' := ‚ü®one_hol ‚Ñç', const_is_bounded 1‚ü©,
  add_mem' := Œª f g hf hg, ‚ü®add_hol f g hf.diff hg.diff,
  hf.bdd_at_infty.add hg.bdd_at_infty‚ü©,
  zero_mem' := ‚ü®zero_hol ‚Ñç', zero_form_is_bounded_at_im_infty‚ü©,
  neg_mem' := Œª f hf, ‚ü®neg_hol f hf.diff,hf.bdd_at_infty.neg_left‚ü©
}

instance is_holomorphic_on' (f : Hol‚Ñç) : is_holomorphic_bdd f := 
subring.mem_carrier.mpr f.property

def Hol‚Ñç.order (f : Hol‚Ñç) (z : ‚Ñç) : ‚Ñ§ := @hol_order f.val f.property z

lemma pseries_neq_zero_function_neq_zero (z : ‚Ñç') (f : Hol‚Ñç)  
(hp : (pseries_of_holomorphic f z) ‚â† 0): 
f.val ‚â† (0 : ‚Ñç' ‚Üí ‚ÑÇ) :=
begin
  intro h,
  have hc : (pseries_of_holomorphic f z) = 0,
  {
    have j : extend_by_zero f.val = 0,
    {
      rw h,
      exact extend_by_zero_zero',
    },
    have p : has_fpower_series_at (extend_by_zero f.val) (pseries_of_holomorphic f z) z,
    {
      apply pseries_of_holomorphic_def,
    },
    rw j at p,
    rw has_fpower_series_at.eq_zero p,
  },
  exact hp hc,
end

lemma preconn_‚Ñç' : is_preconnected upper_half_space :=
begin
sorry,
end

lemma hol_bdd.eventually_eq_zero_everywhere (f : Hol‚Ñç) 
  (x : ‚Ñç') (hF : ‚àÄ·∂† z in ùìù x, (extend_by_zero f.val) z = 0):
  (extend_by_zero f.val) = (0 : ‚ÑÇ ‚Üí ‚ÑÇ) :=
begin
have hf : analytic_on ‚ÑÇ (extend_by_zero f.val) ‚Ñç',
{
  --exact analytic_on_of_holomorphic f,
  sorry,
},
have tf : ‚àÄ ‚¶Éy‚¶Ñ, y ‚àà upper_half_space ‚Üí (extend_by_zero f.val) y = (0 : ‚ÑÇ ‚Üí ‚ÑÇ) y,
{
  exact analytic_on.eq_on_zero_of_preconnected_of_eventually_eq_zero hf preconn_‚Ñç' x.prop hF,
},


simp at tf,
simp,
sorry,
end


lemma function_neq_zero_forall_z_pseries_neq_zero (f : Hol‚Ñç)
(hf : f ‚â† 0) : ‚àÄ z : ‚Ñç', (pseries_of_holomorphic f z) ‚â† 0 :=
begin
intro z,
have it : f.val ‚â† (0 : ‚Ñç' ‚Üí ‚ÑÇ),
{
  simp only [subtype.val_eq_coe, ne.def, subring.coe_eq_zero_iff],
  exact hf,
},
intro h,
apply it,
apply extend_by_zero_f_eq_zero,
set F := pseries_of_holomorphic f z with hF,
have G : has_fpower_series_at (extend_by_zero f.val) F z := by {apply pseries_of_holomorphic_def},
rw h at G,
have l := has_fpower_series_at.eventually_eq_zero G,
exact hol_bdd.eventually_eq_zero_everywhere f z l,
end

/-
@[simp] lemma eventually_mem_nhds {s : set Œ±} {a : Œ±} :
  (‚àÄ·∂† x in ùìù a, s ‚àà ùìù x) ‚Üî s ‚àà ùìù a :=
eventually_eventually_nhds
-/

lemma hkey (z : ‚ÑÇ) (U V V': set ‚ÑÇ) (hU : U ‚àà ùìù z) 
(hV : {z}·∂ú ‚äÜ V) (hV' : {z}·∂ú ‚äÜ V') : 
‚àÉ (w : ‚ÑÇ), w ‚àà U ‚à© (V ‚à© V') ‚àß w ‚â† z :=
begin
have r : ‚àÄ·∂† x in ùìù z, U ‚àà ùìù x,
{
  rw eventually_mem_nhds,
  exact hU,
},

sorry,
end 

instance : is_domain Hol‚Ñç := 
{ eq_zero_or_eq_zero_of_mul_eq_zero := 
  begin
  intros f g q,
  by_contradiction,
  push_neg at h,
  cases h with hf_ne_zero hg_ne_zero,
  have hc : f * g ‚â† 0,
  {
    let i := (‚ü®0, 1‚ü© : ‚ÑÇ),--(‚ü®(‚ü®0, 1‚ü© : ‚ÑÇ), by {simp,} ‚ü© : ‚Ñç),
    set F := pseries_of_holomorphic f (‚ü®i, by {simp,} ‚ü© : ‚Ñç) with hF,
    have Fp : has_fpower_series_at (extend_by_zero f.val) F i := by {apply pseries_of_holomorphic_def},
    have rf := function_neq_zero_forall_z_pseries_neq_zero f hf_ne_zero,
    have tf : F ‚â† 0 := rf (‚ü®i, by {simp,} ‚ü© : ‚Ñç),
    set G := pseries_of_holomorphic g (‚ü®i, by {simp,} ‚ü© : ‚Ñç) with hG,
    have Gp : has_fpower_series_at (extend_by_zero g.val) G i := by {apply pseries_of_holomorphic_def},
    have rg := function_neq_zero_forall_z_pseries_neq_zero g hg_ne_zero,
    have tg : G ‚â† 0 := rg (‚ü®i, by {simp,} ‚ü© : ‚Ñç),
    have ef := has_fpower_series_at.locally_ne_zero Fp tf,
    have eg := has_fpower_series_at.locally_ne_zero Gp tg,

    have aux1 : (extend_by_zero f.val) * (extend_by_zero g.val) ‚â† 0,
    {
      rcases ef with ‚ü®U, ‚ü®hU, ‚ü®V, ‚ü®hV,hfUV‚ü©‚ü©‚ü©‚ü©,
      rcases eg with ‚ü®U', ‚ü®hU', ‚ü®V', ‚ü®hV',hgUV'‚ü©‚ü©‚ü©‚ü©,
      simp at hfUV hgUV' hV hV',
      let W := V ‚à© V',
      have hk : ‚àÉ w, w ‚àà U ‚à© W ‚àß w ‚â† i,
      {
        exact hkey i U V V' hU hV hV',
      },
      simp,
      rcases hk with ‚ü®w, hwUW, hwi‚ü©,
      have hfw : extend_by_zero f.val w ‚â† 0,
      {
        have : w ‚àà U ‚à© V,
        {
          simp at hwUW,
          split,
          exact hwUW.1,
          exact hwUW.2.1,
        },
        rw ‚Üê hfUV at this,
        simpa using this,
      },
      have hgw : extend_by_zero g.val w ‚â† 0,
      {
        have : w ‚àà U' ‚à© V',
        {
           
          sorry
        },
        rw ‚Üê hgUV' at this,
        simpa using this,
      },
      have hfgw : (extend_by_zero f.val * extend_by_zero g.val) w ‚â† 0,
      {
        change extend_by_zero f.val w * extend_by_zero g.val w ‚â† 0,
        exact mul_ne_zero hfw hgw,
      },
      intro hc,
      apply hfgw,
      have hc' : (extend_by_zero ‚Üëf * extend_by_zero ‚Üëg) w = (0 : ‚ÑÇ ‚Üí ‚ÑÇ) w,
      {
        rw hc,
      },
      simpa using hc,
    },
    have aux2 : extend_by_zero (f.val * g.val) ‚â† 0,
    {
      rw ‚Üê extend_by_zero_mul at aux1,
      exact aux1,
    },
    have aux3 : f.val * g.val ‚â† 0,
    {
      exact extend_by_zero_f_neq_zero (f.val * g.val) aux2,
    },
    simp only [subtype.val_eq_coe] at aux3,
    norm_cast at aux3,
  },
  exact hc q,
  end,
  exists_pair_ne := 
  begin
  use (Œª z : ‚Ñç', 0),
  split,
  exact zero_hol ‚Ñç',
  exact const_is_bounded 0,
  use (Œª z : ‚Ñç', 1),
  split,
  exact one_hol ‚Ñç',
  exact const_is_bounded 1,
  simp only [ne.def, subtype.mk_eq_mk, function.const_inj, zero_ne_one, not_false_iff],
  end
}


lemma bounded_at_im_infty.smul {f : ‚Ñç' ‚Üí ‚ÑÇ} (c : ‚ÑÇ) (hf : is_bounded_at_im_infty f) : 
is_bounded_at_im_infty (Œª z : ‚Ñç, c * f z) :=
begin
let h : ‚Ñç' ‚Üí ‚ÑÇ := Œª z, c,
let j := const_is_bounded c,
exact is_bounded_at_im_infty.mul j hf,
end

instance : has_smul ‚ÑÇ Hol‚Ñç := 
‚ü®Œª r f, ‚ü®Œª z, r * f.val z, ‚ü®smul_hol r f.val f.prop.diff,
bounded_at_im_infty.smul r f.prop.bdd_at_infty‚ü©‚ü©‚ü©

@[simp] lemma smul_def {f : ‚Ñç' ‚Üí ‚ÑÇ} (hf : f ‚àà Hol‚Ñç) {c : ‚ÑÇ} : (c ‚Ä¢ f) = Œª z, (c * (f z)) := rfl
@[simp] lemma smul_def' {f : Hol‚Ñç} {c : ‚ÑÇ} : (c ‚Ä¢ f).val = Œª z, (c * (f.val z)) := rfl

lemma comm_Hol‚Ñç (f g : Hol‚Ñç) : f*g = g*f :=
begin
apply subtype.eq,
simp [mul_comm],
end


instance : algebra ‚ÑÇ Hol‚Ñç := 
{ smul := has_smul.smul,
  to_fun := Œª r, ‚ü®(Œª z, r), by {
    split,
    exact const_hol r,
    exact const_is_bounded r,
  }‚ü©,
  map_one':= rfl,
  map_mul':= Œª _ _, rfl,
  map_zero' := rfl,
  map_add' := Œª _ _, rfl,
  commutes' := Œª _ _, by {rw comm_Hol‚Ñç},
  smul_def' := by {
    intros r f,
    simp,
    apply subtype.eq,
    simp,
    change _  = Œª (z : ‚Ñç'), r * f.val z,
    simp,
  }
}


open localization

noncomputable def Mer‚Ñç := fraction_ring Hol‚Ñç

instance Mer‚Ñç_is_field : field Mer‚Ñç := 
begin
apply fraction_ring.field,
end

def Mer‚Ñç.mk (f : Hol‚Ñç) (g : non_zero_divisors Hol‚Ñç) : Mer‚Ñç := localization.mk f g

def Mer‚Ñç.numerator (F : Mer‚Ñç) : Hol‚Ñç :=
((monoid_of _).sec F).1

-- instance numerator_is_holomorphic (F : Mer‚Ñç) : is_holomorphic_on_‚Ñç F.numerator.val := F.numerator.property

def Mer‚Ñç.denominator (F : Mer‚Ñç) : (non_zero_divisors Hol‚Ñç) :=
((monoid_of _).sec F).2

--Given F = f/g a meromorphic function and z ‚àà ‚Ñç, we can compute the order of F at z as
--the difference of the order of f and the order of g.
def meromorphic.order (F : Mer‚Ñç) (z : ‚Ñç) : ‚Ñ§ := 
Hol‚Ñç.order F.numerator z - Hol‚Ñç.order F.denominator z

--next step would be to give the definition of a weakly modular form on the upper half plane.
--from here i could start by trying to state the valence formula.

